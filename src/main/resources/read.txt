存储命令：
（1） set 命令：用于将 value(数据值) 存储在指定的 key(键) 中。
如果set的key已经存在，该命令可以更新该key所对应的原来的数据，也就是实现更新的作用。
（2）add 命令：用于将 value(数据值) 存储在指定的 key(键) 中。
如果 add 的 key 已经存在，则不会更新数据，之前的值将仍然保持相同，并且您将获得响应 NOT_STORED。
（3）replace 命令：用于替换已存在的 key(键) 的 value(数据值)。
如果 key 不存在，则替换失败，并且您将获得响应 NOT_STORED。
（4）append 命令：用于向已存在 key(键) 的 value(数据值) 后面追加数据 。
（5）prepend 命令：用于向已存在 key(键) 的 value(数据值) 前面追加数据 。
（6）CAS（Check-And-Set 或 Compare-And-Swap） 命令：用于执行一个"检查并设置"的操作它仅在当前客户端最后一次取值后，该key 对应的值没有被其他客户端修改的情况下， 才能够将值写入。
检查是通过cas_token参数进行的， 这个参数是Memcach指定给已经存在的元素的一个唯一的64位值。
查找命令：
（1） get 命令：获取存储在 key(键) 中的 value(数据值) ，如果 key 不存在，则返回空。
（2）gets 命令：用于获取带有 CAS 令牌存 的 value(数据值) ，如果 key 不存在，则返回空。
（3） delete 命令：用于删除已存在的 key(键)。
（4）incr 与 decr 命令：用于对已存在的 key(键) 的数字值进行自增或自减操作。
incr 与 decr 命令操作的数据必须是十进制的32位无符号整数。
如果 key 不存在返回 NOT_FOUND，如果键的值不为数字，则返回 CLIENT_ERROR，其他错误返回 ERROR。
统计命令：
（1）stats 命令：用于返回统计信息例如 PID(进程号)、版本号、连接数等。
（2） stats items 命令：用于显示各个 slab 中 item 的数目和存储时长(最后一次访问距离现在的秒数)。
（3） stats slabs 命令：用于显示各个slab的信息，包括chunk的大小、数目、使用情况等。
（4）stats sizes 命令：用于显示所有item的大小和个数。
（5）flush_all 命令：用于清理缓存中的所有 key=>value(键=>值) 对。
该命令提供了一个可选参数 time，用于在制定的时间后执行清理缓存操作。
